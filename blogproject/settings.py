"""
Django settings for blogproject project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os # Asegúrate de que esta importación esté al principio

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ukz72g)*267@$nvdk**+6#+a*nyzh_1t3o2=@wxtpga$cew)2^' # Deja tu propia clave secreta

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blogapp',
    'widget_tweaks',
    'ckeditor',
    'ckeditor_uploader', # Necesario para la subida de archivos con CKEditor
    'taggit', # Necesario para la funcionalidad de tags
    'graphene_django', # <-- ¡AÑADIDO! Para GraphQL
    'django_filters',  # <-- ¡AÑADIDO! Para filtros en GraphQL
    'graphql_jwt', # <-- ¡AÑADIDO! Para JWT con Graphene
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'blogproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # DIRS: Ruta explícita a la carpeta 'templates' de tu aplicación blogapp
        'DIRS': [BASE_DIR / 'blogapp' / 'templates'], # Cubre blogapp/templates/registration/ y otros
        'APP_DIRS': True, # Busca plantillas dentro de las subcarpetas 'templates' de cada app (ej. blogapp/templates/blogapp/)
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'blogproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/' 
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media' 

STATIC_ROOT = BASE_DIR / 'staticfiles' # Directorio donde collectstatic recolectará archivos
STATICFILES_DIRS = [
    # Puedes añadir directorios adicionales de archivos estáticos aquí si los tienes,
    # por ejemplo, si tienes una carpeta 'static' directamente en blogproject.
    # BASE_DIR / 'static',
]


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Redirecciones de autenticación de Django (se mantendrán por si acaso, pero la lógica fuerte es JWT)
LOGIN_URL = 'blogapp:custom_login' 
LOGIN_REDIRECT_URL = 'blogapp:blog_list' 
LOGOUT_REDIRECT_URL = 'blogapp:blog_list' 


# CKEditor config
CKEDITOR_UPLOAD_PATH = "uploads/" 
CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'full',
        'height': 300,
        'width': '100%',
        'extraPlugins': 'codesnippet', 
    },
    'simple_toolbar': { 
        'toolbar': 'Custom',
        'toolbar_Custom': [
            ['Bold', 'Italic', 'Underline', 'Strike', 'RemoveFormat'],
            ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent'],
            ['Link', 'Unlink'],
            ['Maximize']
        ],
        'height': 150,
        'width': '100%',
    }
}

# Configuración de CACHES
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake', 
    }
}

# Configuración de Graphene para GraphQL
GRAPHENE = {
    'SCHEMA': 'blogproject.schema.schema', # Ruta a tu esquema principal de GraphQL
    'MIDDLEWARE': [ # Middleware para manejar la autenticación JWT en Graphene
        'graphql_jwt.middleware.JSONWebTokenMiddleware',
    ],
}

# Configuración para django-graphql-jwt
GRAPHQL_JWT = {
    'JWT_VERIFY_EXPIRATION': True,
    'JWT_LONG_RUNNING_REFRESH_TOKEN': True, # Permite tokens de refresco de larga duración
    'JWT_ALLOW_ANY_FEILD': True, # Para evitar errores de Type en inputs si los campos no son exactos
}

# Backend de autenticación por defecto de Django (necesario para el login tradicional y admin)
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'graphql_jwt.backends.JSONWebTokenBackend', # Necesario para la autenticación JWT
]
